@model BulkImportWithValidationErrorVM
@using UserManagement.Domain.ViewModel
@using UserManagement.Extensions;

<div id="inteleoverlay">
    <div class="intelespinner"></div>
    <br />
    Loading...
</div>
@if (Model != null && Model.Data.Count() > 0)
{

    <div class="card">
        <div class="card-header visible">
            <div class="text-info total-summary"></div>
        </div>
        <div class="card-body">
            <form id="bulkform" asp-action="Index">
                <div class="text-danger mb-2 validation-summary"></div>

                <div class="text-center mb-2">
                    <button id="btnformhelper" class="btn btn-info submit" asp-action="ValidateData" asp-controller="Home">Validate</button>
                    <button id="btnformhelper1" class="btn btn-info submit" asp-action="InsertData" asp-controller="Home">Insert</button>
                </div>
                <table class="bulkupload table" id="tblImportData">
                    <thead>
                        <tr>
                            <th style="min-width: 28px; max-width:50px;">
                                Select
                            </th>

                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].HFName)
                            </th>

                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].HFPhone)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].HFType)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].NIN)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].HFEmail)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].HFState)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].HFDistrict)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].HFCity)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].Address)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].PIN)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserPrefix)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].FirstName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].LastName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserMobile)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].Gender)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].Qualification)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].Experience)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].DRRegNo)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserEmail)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].Designation)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].DOB)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserState)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserDistrict)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserCity)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserAddress)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserPin)
                            </th>

                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserAvailableDay)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserAvailableFromTime)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserAvailableToTime)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].UserRole)
                            </th>
                            @*<th>
                                    @Html.DisplayNameFor(model => model.Data[0].AssignedHFType)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Data[0].AssignHF)
                                </th>*@
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].HFShortName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Data[0].SubMenuName)
                            </th>

                        </tr>
                    </thead>
                    <tbody>


                        @for (var i = 0; i < Model.Data.Count(); i++)
                        {
                            var mdl = Model.Data[i];
                            <tr>
                                <td style="min-width: 28px; max-width:50px;">
                                    @Html.CheckBox($"[{i}].isActive", false, new { @class = "form-control chkSelected", @style = "max-width:25px;" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].HFName, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.HFName), i, Model.Errors)
                                </td>

                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].HFPhone, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.HFPhone), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].HFType, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.HFType), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].NIN, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.NIN), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].HFEmail, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.HFEmail), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model.Data[i].SelectedHFStateId,
                                    new SelectList(ViewBag.States, "Id", "Value"), "--Select--", new { @class = "form-control state" })
                                    @Html.BulkValidationError(nameof(mdl.SelectedHFStateId), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model.Data[i].SelectedHFDistrictId,
                                    new SelectList(Model.Data[i].HFDistricts, "Id", "Value"), "--Select--", new { @class = "form-control district" })
                                    @Html.BulkValidationError(nameof(mdl.SelectedHFDistrictId), i, Model.Errors)
                                    @Html.BulkValidationError(nameof(mdl.HFDistrict), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model.Data[i].SelectedHFCityId,
                                    new SelectList(Model.Data[i].HFCities, "Id", "Value"), "--Select--", new { @class = "form-control city" })
                                    @Html.BulkValidationError(nameof(mdl.SelectedHFCityId), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].Address, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.Address), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].PIN, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.PIN), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserPrefix, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserPrefix), i, Model.Errors)
                                </td>

                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].FirstName, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.FirstName), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].LastName, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.LastName), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserMobile, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserMobile), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].Gender, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.Gender), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].Qualification, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.Qualification), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].Experience, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.Experience), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].DRRegNo, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.DRRegNo), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserEmail, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserEmail), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model.Data[i].SelectedSpecialityId,
                                    new SelectList(ViewBag.Specilization, "Id", "Value"), "--Select--", new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.SelectedSpecialityId), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].DOB, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.DOB), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model.Data[i].SelectedUserStateId,
                                    new SelectList(ViewBag.States, "Id", "Value"), "--Select--", new { @class = "form-control state" })
                                    @Html.BulkValidationError(nameof(mdl.SelectedUserStateId), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model.Data[i].SelectedUserDistrictId,
                                      new SelectList(Model.Data[i].UserDistricts, "Id", "Value"), "--Select--", new { @class = "form-control district" })
                                    @Html.BulkValidationError(nameof(mdl.SelectedUserDistrictId), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model.Data[i].SelectedUserCityId,
                                      new SelectList(Model.Data[i].UserCities, "Id", "Value"), "--Select--", new { @class = "form-control city" })
                                    @Html.BulkValidationError(nameof(mdl.SelectedUserCityId), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserAddress, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserAddress), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserPin, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserPin), i, Model.Errors)
                                </td>

                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserAvailableDay, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserAvailableDay), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserAvailableFromTime, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserAvailableFromTime), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserAvailableToTime, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserAvailableToTime), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].UserRole, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.UserRole), i, Model.Errors)
                                </td>
                                @*<td>
                                        @Html.TextBoxFor(modelItem => Model.Data[i].AssignedHFType, new { @class = "form-control" })
                                        @Html.BulkValidationError(nameof(mdl.AssignedHFType), i, Model.Errors)
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(modelItem => Model.Data[i].AssignHF, new { @class = "form-control" })
                                        @Html.BulkValidationError(nameof(mdl.AssignHF), i, Model.Errors)
                                    </td>*@
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].HFShortName, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.HFShortName), i, Model.Errors)
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model.Data[i].SubMenuName, new { @class = "form-control" })
                                    @Html.BulkValidationError(nameof(mdl.SubMenuName), i, Model.Errors)
                                </td>

                            </tr>
                        }

                    </tbody>
                </table>
            </form>
        </div>
    </div>
}


<script type="text/javascript">
    var tblImportData;

    function formValidationCallback() {

        setTimeout(function () {
            updateValidationSummary();
            stopSpinner();
        }, 200);
    }
    function setRowBorderColor(validRows, inValidRows) {
        if (validRows) {
            $(validRows).removeClass('table-danger');
            $(validRows).addClass('table-success');
        }
        if (inValidRows) {
            $(inValidRows).removeClass('table-success');
            $(inValidRows).addClass('table-danger');
        }
    }
    function displayTotalSummary(validRows, inValidRows) {
        let validCount = (validRows !== null && validRows !== undefined) ? validRows.length : 0;
        let invalidCount = (inValidRows !== null && inValidRows !== undefined) ? inValidRows.length : 0;
        let totalhtml = 'Records : <span class="badge badge-success badge-pill mr-1" > ' + validCount + '</span>';
        totalhtml += '<span class="badge badge-danger badge-pill" > ' + invalidCount + '</span>';
        $('.total-summary').html(totalhtml);
    }
    function updateValidationSummary() {
        let validInvalid = getValidInvalidRows();

        setRowBorderColor(validInvalid.validRows, validInvalid.inValidRows);
        displayTotalSummary(validInvalid.validRows, validInvalid.inValidRows);

        let errorDictionary = getCountByError(validInvalid.errorFields);
        displayValidationSummary(errorDictionary);
    }
    function getValidInvalidRows() {
        let validInvalid = {
            validRows: [],
            inValidRows: [],
            errorFields: []
        };
        tblImportData.rows().every(function (rowIdx, tableLoop, rowLoop) {
            let row = this.node();
            let errorField = $(row).find('.field-validation-error');
            if (errorField && errorField.length > 0) {
                //console.log('error Field found', errorField, row);
                validInvalid.inValidRows.push(row);
                let errorFieldArray = errorField.toArray();
                validInvalid.errorFields = validInvalid.errorFields.concat(errorFieldArray);

            }
            else {
                validInvalid.validRows.push(row);
            }
            updateNames(row, rowIdx);
        });
        return validInvalid;
    }
    function updateNames(row, rowindex) {
        var inputs = $(row).find('input');
        var spans = $(row).find('span');
        var selects = $(row).find('select');
        $(inputs).each((index, input) => {
            let name = $(input).attr('name');
            let splitPart = name.split('.')[1];
            let newName = "[" + rowindex + "]." + splitPart;
            $(input).attr('name', newName);
        });
        $(selects).each((index, select) => {
            let name = $(select).attr('name');
            let splitPart = name.split('.')[1];
            let newName = "[" + rowindex + "]." + splitPart;
            $(select).attr('name', newName);
        });
        $(spans).each((index, span) => {

            let name = $(span).attr('data-valmsg-for');
            if (name) {
                let splitPart = name.split('.')[1];
                let newName = "[" + rowindex + "]." + splitPart;
                $(span).attr('data-valmsg-for', newName);

            }
        });
    }
    function getCountByError(errorFields) {
        let errorCount = [];
        $(errorFields).each((index, element) => {
            let text = $(element).text();
            let foundItemIndex = errorCount.findIndex(x => x.key == text);
            if (foundItemIndex >= 0) {
                let item = errorCount[foundItemIndex];
                item.value = item.value + 1;
                errorCount[foundItemIndex] = item;
            }
            else {
                let item = {
                    key: text,
                    value: 1
                };
                errorCount.push(item);
            }
        });
        return errorCount;
    }
    function displayValidationSummary(errorDictionary) {
        if (errorDictionary) {
            let sortedDictionary = errorDictionary.sort(function (firstItem, secondItem) {
                return (firstItem.key < secondItem.key ? -1 : (firstItem.key > secondItem.key ? 1 : 0));
            });
            let errorhtml = '<ul class="no-bullets"> ';
            for (var i = 0; i < sortedDictionary.length; i++) {
                item = sortedDictionary[i];
                errorhtml += '<li> <span class="badge badge-danger badge-pill mr-2" > ' + item.value + '</span>' + item.key + '</li> ';
            }
            errorhtml += '</ul>';
            $('.validation-summary').html(errorhtml);
        }
    }
    function deleteRows() {
        if (confirm('Are you sure you want to delete selected rows ?')) {
            tblImportData.rows('.selected').remove().draw(true);
            formValidationCallback();
        }

    }
    function getOptions(data) {
        var options = '<option value="0">--Select--</option>';
        if (data) {
            for (var i = 0; i < data.length; i++) {
                options = options + '<option value=' + data[i].id + '>' + data[i].value + '</option>';
            }
        }
        return options;
    }
    function SelectAllValidOrInValidRows(ctrl, isValid) {
        let validRowOrInvalidRow = '.table-danger';
        if (isValid) {
            validRowOrInvalidRow = '.table-success';
        }
        let tblRows = tblImportData.rows(validRowOrInvalidRow);
        if (tblRows) {
            let nodes = tblRows.nodes();
            var checks = $(nodes).find(".chkSelected");
            if ($(ctrl).is(':checked')) {
                $(nodes).addClass('selected');
                $(checks).attr('checked', 'checked');
            }
            else {
                $(nodes).removeClass('selected');
                $(checks).removeAttr('checked');
            }
        }
    }
    $(document).ready(function () {
        formValidationCallback();
        $("#chkSelectAllInvalid").on('click', function () {
            let invalidRows = tblImportData.rows('.table-danger');
            if (invalidRows) {
                let nodes = invalidRows.nodes();
                var checks = $(nodes).find(".chkSelected");
                if ($(this).is(':checked')) {
                    $(nodes).addClass('selected');
                    $(checks).attr('checked', 'checked');
                }
                else {
                    $(nodes).removeClass('selected');
                    $(checks).removeAttr('checked');
                }
            }
        });
        $("#chkSelectAllValid").on('click', function () {
            let validRows = tblImportData.rows('.table-sucess');
            if (validRows) {
                let nodes = invalidRows.nodes();
                var checks = $(nodes).find(".chkSelected");
                if ($(this).is(':checked')) {
                    $(nodes).addClass('selected');
                    $(checks).attr('checked', 'checked');
                }
                else {
                    $(nodes).removeClass('selected');
                    $(checks).removeAttr('checked');
                }
            }
        });

        tblImportData = $('#tblImportData').DataTable({
            "ordering": false,
            "searching": false,
            "paging": false,
            "scrollX": true,
            "scrollY": "400px",
            "scrollCollapse": true,
            "info": true,
            "dom": '<"toolbar">frtip',
        });
        $("div.toolbar").html(`<div class="container">
                                <div class="row">
                                    <div class="col-md-4">
                                       <div class="form-check">
                                          <input class="form-check-input" type="checkbox" onclick="SelectAllValidOrInValidRows(this,true)" value="" id="chkSelectValid">
                                          <label class="form-check-label" for="chkSelectValid">
                                            Select All Valid Rows
                                          </label>
                                      </div>
                                      <div class="form-check">
                                        <input class="form-check-input" type="checkbox" onclick="SelectAllValidOrInValidRows(this,false)" value="" id="chkSelectInValid">
                                        <label class="form-check-label" for="chkSelectInValid">
                                          Select All Invalid Rows
                                        </label>
                                       </div>
                                    </div>
                                    <div class="col-md-4">
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteRows()"> Delete Selected </button>
                                    </div>
                                </div>
                            </div>`);
        tblImportData.rows().every(function (rowIdx, tableLoop, rowLoop) {
            let row = this.node();
            let state = $(row).find('.state');
            let district = $(row).find('.district');
            let checkbox = $(row).find('.chkSelected');

            $(checkbox).on('click', function () {

                var row = $(this).parents('tr');
                if ($(this).is(':checked')) {
                    $(row).addClass('selected');
                }
                else {
                    $(row).removeClass('selected');
                }
            });
            $(state).change(function () {
                let innerState = $(this);
                let windowURL = window.location.href;
                let url = windowURL.includes("Home") ? 'GetDistricts' : 'Home/GetDistricts';
                $.ajax({
                    type: "post",
                    url: url,
                    data: { stateId: $(innerState).val() },
                    datatype: "json",
                    traditional: true,
                    success: function (data) {
                        var options = getOptions(data);

                        let stateId = $(innerState).attr('id');
                        let districtId = stateId.replace('State', 'District');
                        //console.log('district', districtId);
                        $('#' + districtId).empty().append(options);
                        let cityId = districtId.replace('District', 'City');
                        var cityOptions = getOptions(null);
                        $('#' + cityId).empty().append(cityOptions);
                    }
                });
            });
            $(district).change(function () {
                let innerDistrict = $(this);
                let windowURL = window.location.href;
                let url = windowURL.includes("Home") ? 'GetCities' : 'Home/GetCities';
                $.ajax({
                    type: "post",
                    url: url,
                    data: { stateId: 0, districtId: $(innerDistrict).val() },
                    datatype: "json",
                    traditional: true,
                    success: function (data) {
                        var options = getOptions(data);
                        let districtId = $(innerDistrict).attr('id');
                        let cityId = districtId.replace('District', 'City');
                        $('#' + cityId).empty().append(options);
                    }
                });
            });

        });
    });
</script>