@model IList<MemberBulkImportVM>
@using UserManagement.Domain.ViewModel
@if (Model != null && Model.Count() > 0)
{
    <div class="card">
        <div class="card-header visible">
            <div class="text-info total-summary"></div>
        </div>
        <div class="card-body">
            <form asp-formhelper="true" asp-callback="formValidationCallback" asp-action="ImportData">
                <div class="text-danger mb-2 validation-summary"></div>

                <div class="text-center mb-2">
                    <input type="submit" value="Submit" class="btn btn-info" onclick="formValidationCallback();" />
                </div>
                <table class="bulkupload table" id="tblImportData">
                    <thead>
                        <tr>
                            <th style="min-width: 28px; max-width:50px;">
                                Select
                            </th>

                            <th>
                                @Html.DisplayNameFor(model => model[0].HFName)
                            </th>

                            <th>
                                @Html.DisplayNameFor(model => model[0].HFPhone)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].HFType)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].NIN)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].HFEmail)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].HFState)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].HFDistrict)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].HFCity)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].Address)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].PIN)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].FirstName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].LastName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserMobile)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].Gender)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].Qualification)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].Experience)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].DRRegNo)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserEmail)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].Designation)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].DOB)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserState)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserDistrict)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserCity)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserAddress)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserPin)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserPrefix)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserAvailableDay)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserAvailableFromTime)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserAvailableToTime)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].UserRole)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].AssignedHFType)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].AssignHF)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].SubMenuName)
                            </th>

                        </tr>
                    </thead>
                    <tbody>


                        @for (var i = 0; i < Model.Count(); i++)
                        {
                            <tr>
                                <td style="min-width: 28px; max-width:50px;">
                                    @Html.CheckBox($"[{i}].isActive", false, new {  @class = "form-control chkSelected", @style = "max-width:25px;" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].HFName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].HFName, "", new { @class = "text-danger" })
                                </td>

                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].HFPhone, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].HFPhone, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].HFType, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].HFType, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].NIN, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].NIN, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].HFEmail, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].HFEmail, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model[i].SelectedHFStateId,
                                    new SelectList(ViewBag.States, "Id", "Value"), "--Select--", new { @class = "form-control state" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].SelectedHFStateId, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model[i].SelectedHFDistrictId,
                                    new SelectList(Model[i].HFDistricts, "Id", "Value"), "--Select--", new { @class = "form-control district" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].SelectedHFDistrictId, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model[i].SelectedHFCityId,
                                    new SelectList(Model[i].HFCities, "Id", "Value"), "--Select--", new { @class = "form-control city" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].SelectedHFCityId, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].Address, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].Address, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].PIN, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].PIN, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].FirstName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].FirstName, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].LastName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].LastName, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserMobile, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserMobile, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].Gender, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].Gender, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].Qualification, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].Qualification, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].Experience, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].Experience, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].DRRegNo, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].DRRegNo, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserEmail, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserEmail, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].Designation, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].Designation, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].DOB, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].DOB, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model[i].SelectedUserStateId,
                                    new SelectList(ViewBag.States, "Id", "Value"), "--Select--", new { @class = "form-control state" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].SelectedUserStateId, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model[i].SelectedUserDistrictId,
                                      new SelectList(Model[i].UserDistricts, "Id", "Value"), "--Select--", new { @class = "form-control district" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].SelectedUserDistrictId, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.DropDownListFor(model => Model[i].SelectedUserCityId,
                                      new SelectList(Model[i].UserCities, "Id", "Value"), "--Select--", new { @class = "form-control city" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].SelectedUserCityId, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserAddress, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserAddress, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserPin, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserPin, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserPrefix, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserPrefix, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserAvailableDay, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserAvailableDay, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserAvailableFromTime, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserAvailableFromTime, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserAvailableToTime, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserAvailableToTime, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].UserRole, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].UserRole, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].AssignedHFType, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].AssignedHFType, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].AssignHF, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].AssignHF, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    @Html.TextBoxFor(modelItem => Model[i].SubMenuName, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(modelItem => Model[i].SubMenuName, "", new { @class = "text-danger" })
                                </td>

                            </tr>
                        }

                    </tbody>
                </table>
            </form>
        </div>
    </div>
}


<script type="text/javascript">
    var tblImportData;
    function formValidationCallback(response, statusText, xhr, $form) {
        setTimeout(function () { updateValidationSummary(); }, 200);
    }
    function setRowBorderColor(validRows, inValidRows) {
        if (validRows) {
            $(validRows).removeClass('table-danger');
            $(validRows).addClass('table-success');
        }
        if (inValidRows) {
            $(inValidRows).removeClass('table-success');
            $(inValidRows).addClass('table-danger');
        }
    }
    function displayTotalSummary(validRows, inValidRows) {
        let validCount = (validRows !== null && validRows !== undefined) ? validRows.length : 0;
        let invalidCount = (inValidRows !== null && inValidRows !== undefined) ? inValidRows.length : 0;
        let totalhtml = 'Records : <span class="badge badge-success badge-pill mr-1" > ' + validCount + '</span>';
        totalhtml += '<span class="badge badge-danger badge-pill" > ' + invalidCount + '</span>';
        $('.total-summary').html(totalhtml);
    }
    function updateValidationSummary() {
        let validInvalid = getValidInvalidRows();
        console.log(validInvalid);
        setRowBorderColor(validInvalid.validRows, validInvalid.inValidRows);
        displayTotalSummary(validInvalid.validRows, validInvalid.inValidRows);

        let errorDictionary = getCountByError(validInvalid.errorFields);
        displayValidationSummary(errorDictionary);
    }
    function getValidInvalidRows() {
        let validInvalid = {
            validRows: [],
            inValidRows: [],
            errorFields: []
        };
        tblImportData.rows().every(function (rowIdx, tableLoop, rowLoop) {
            let row = this.node();
            let errorField = $(row).find('.field-validation-error');
            if (errorField && errorField.length > 0) {
                //console.log('error Field found', errorField, row);
                validInvalid.inValidRows.push(row);
                let errorFieldArray = errorField.toArray();
                validInvalid.errorFields = validInvalid.errorFields.concat(errorFieldArray);
                
            }
            else {
                validInvalid.validRows.push(row);
            }
            updateNames(row, rowIdx);
        });
        return validInvalid;
    }
    function updateNames(row, rowindex) {
        var inputs = $(row).find('input');
        var spans = $(row).find('span');
        var selects = $(row).find('select');
        $(inputs).each((index,input) => {
            let name = $(input).attr('name');
            let splitPart = name.split('.')[1];
            let newName = "[" + rowindex + "]." + splitPart;
            $(input).attr('name', newName);
        });
        $(selects).each((index, select) => {
            let name = $(select).attr('name');
            let splitPart = name.split('.')[1];
            let newName = "[" + rowindex + "]." + splitPart;
            $(select).attr('name', newName);
        });
        $(spans).each((index, span) => {
           
            let name = $(span).attr('data-valmsg-for');
            if (name) {
                let splitPart = name.split('.')[1];
                let newName = "[" + rowindex + "]." + splitPart;
                $(span).attr('data-valmsg-for', newName);
                console.log('span attr value', name, newName);
            }
        });
    }
    function getCountByError(errorFields) {
        let errorCount = [];
        $(errorFields).each((index, element) => {
            let text = $(element).text();
            let foundItemIndex = errorCount.findIndex(x => x.key == text);
            if (foundItemIndex >= 0) {
                let item = errorCount[foundItemIndex];
                item.value = item.value + 1;
                errorCount[foundItemIndex] = item;
            }
            else {
                let item = {
                    key: text,
                    value: 1
                };
                errorCount.push(item);
            }
        });
        return errorCount;
    }
    function displayValidationSummary(errorDictionary) {
        if (errorDictionary) {
            let sortedDictionary = errorDictionary.sort(function (firstItem, secondItem){
                return ( firstItem.key < secondItem.key? -1 : (firstItem.key > secondItem.key ? 1 : 0));
            });
            let errorhtml = '<ul class="no-bullets"> ';
            for (var i = 0; i < sortedDictionary.length; i++) {
                item = sortedDictionary[i];
                errorhtml += '<li> <span class="badge badge-danger badge-pill mr-2" > '+ item.value + '</span>' + item.key +  '</li> ';
            }
            errorhtml += '</ul>';
            $('.validation-summary').html(errorhtml);
        }
    }
    function deleteRows() {
        tblImportData.rows('.selected').remove().draw(true);
        formValidationCallback();
    }
    $(document).ready(function () {

        formValidationCallback();

        tblImportData = $('#tblImportData').DataTable({
            "ordering": false,
            "searching": false,
            "paging": true,
            "scrollX": true,
            "info":true,
            dom: 'lBfrtip<"actions">',
            buttons: {
                buttons: [
                    {
                        text: 'Delete',
                        className: 'btn btn-outline-danger ml-2',
                        action: function (e, dt, node, config) {
                            if (confirm('Are you sure you want to delete the data ?')) {
                                deleteRows();
                            }
                        }
                    }
                ],
                dom: {
                    button: { className: "btn" },
                    buttonLiner: { tag: null }
                }
            }
        });
       
        $('.state').change(function () {
            let state = $(this);
            $.ajax({
                type: "post",
                url: "Home/GetDistricts",
                data: { stateId: $(state).val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var options = '<option value="0">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        options = options + '<option value=' + data[i].id + '>' + data[i].value + '</option>';
                    }
                    console.log('state clicked', state);
                    let stateId = $(state).attr('id');
                    let districtId = stateId.replace('State', 'District');
                    console.log('district', districtId);
                    $('#' + districtId).empty().append(options);
                }
            });
        }); 
        $('.district').change(function () {
            let district = $(this);
            $.ajax({
                type: "post",
                url: "Home/GetCities",
                data: { stateId: 0, districtId: $(this).val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    var options = '<option value="0">--Select--</option>';
                    for (var i = 0; i < data.length; i++) {
                        options = options + '<option value=' + data[i].id + '>' + data[i].value + '</option>';
                    }
                    let districtId = $(district).attr('id');
                    let cityId = districtId.replace('District', 'City');
                    $('#' + cityId).empty().append(options);
                }
            });
        }); 
        $('.chkSelected').on('click', function () {

            var row = $(this).parents('tr');
            if ($(this).is(':checked')) {
                $(row).addClass('selected');
            }
            else {
                $(row).removeClass('selected');
            }
        });
    });
 </script>